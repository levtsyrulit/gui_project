# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GisECDialog
                                 A QGIS plugin
 GIS engeneering communication
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Competentit
        email                : info@competentit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from PyQt5 import QtCore
from ...Helpers.MessageBoxHelper import MessageBoxHelper

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'SettingsDialog.ui'))

class SettingsDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(SettingsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.button_cancel_settings_dlg.clicked.connect(self.__closeDlg)
        self.button_save_settings_dlg.clicked.connect(self.__save_settings)
        self.administration_server_input.setText(
            QSettings(QtCore.QSettings.NativeFormat, QtCore.QSettings.UserScope, "Competentit", "GisEC").value(
                'ip'))
        self.setModal(True)
    
    def __closeDlg(self):
        self.close()
        
    def __save_settings(self):
        text_from_qlineedit = self.administration_server_input.text()
        text_from_qlineedit = text_from_qlineedit.strip()

        if self.__validation() == True:
            QSettings(QtCore.QSettings.NativeFormat,
                    QtCore.QSettings.UserScope, "Competentit", "GisEC").setValue('ip', text_from_qlineedit)
            self.__closeDlg()

    def __validation(self):
        text_from_qlineedit = self.administration_server_input.text()
        text_from_qlineedit = text_from_qlineedit.strip()
        if (text_from_qlineedit == ""):
            MessageBoxHelper.show_empty_administration_server_message_box(self)
            return False

        return True
    