# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GisECDialog
                                 A QGIS plugin
 GIS engeneering communication
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Competentit
        email                : info@competentit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from PyQt5 import QtCore
from ...Models.UserCredentials import UserCredentials

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'UserCredentialsDialog.ui'))

class UserCredentialsDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(UserCredentialsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.button_cancel.clicked.connect(self.__closeDlg)
        self.button_ok.clicked.connect(self._set_user_credentials)
        self.userCredentials = None
        self.setModal(True)
    
    def __closeDlg(self):
        self.close()
        
    def _set_user_credentials(self):
        self.__closeDlg()
        self.userCredentials = UserCredentials(self.user_input_lineedit.text(), self.password_input_lineedit.text())

    def getUserCredentials(self):
        return self.userCredentials
    
    




    