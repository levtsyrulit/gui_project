# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GisECDialog
                                 A QGIS plugin
 GIS engeneering communication
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Competentit
        email                : info@competentit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import os.path
import urllib.parse

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QListWidgetItem
from qgis.PyQt.QtCore import Qt
from qgis.core import QgsProject, QgsPathResolver
from PyQt5.QtSql import *

from ...Services.AdministrationServerService import AdministrationServerService
from ...Helpers.MessageBoxHelper import MessageBoxHelper
from ...Gui.UserCredentials.UserCredentialsDialog import UserCredentialsDialog

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ManagerOfProjectsDialog.ui'))

class ManagerOfProjectsDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(ManagerOfProjectsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.button_cancel.clicked.connect(self.__closeDlg)
        self.button_open.setEnabled(False)
        self.button_cancel.setEnabled(True)
        if self.projects_list_object.currentRow() != -1:
            self.button_open.setEnabled(True)
        self.projects_list_object.itemClicked.connect(self.__qlistwidgetClicked)
        self.button_open.clicked.connect(self.__openProject)
        self.button_update.clicked.connect(self.__loadProjects)
        self.__loadProjects()
        self.setModal(True)

    def __closeDlg(self):
        self.close()

    def __disableAllButtons(self):
        self.button_open.setEnabled(False)
        self.button_cancel.setEnabled(False)
        self.button_update.setEnabled(False)

    def __loadProjects(self):
        self.projects_list_object.clear()
        self.__disableAllButtons()
        
        try:
            list_of_projects = AdministrationServerService().getProjects()
        except Exception as ex:
            print(ex)
            MessageBoxHelper.show_getting_projects_error_message_box(self)
        else:
            if len(list_of_projects) > 0:
                for i in range(len(list_of_projects)):
                    tmp_name = list_of_projects[i].name
                    tmp_databasename = list_of_projects[i].databasename
                    tmp_item_string = tmp_name + " (" + tmp_databasename + ")"
                    tmp_item = QListWidgetItem(tmp_item_string, self.projects_list_object)
                    tmp_item.setData(Qt.UserRole, list_of_projects[i].connectionString)

                    self.projects_list_object.addItem(tmp_item)

        self.button_cancel.setEnabled(True)
        self.button_update.setEnabled(True)

    def __openProject(self):
        current_connection_string = self.projects_list_object.currentItem().data(Qt.UserRole)
        current_connection_string = current_connection_string.split(";")
        localhost = ''
        port = ''
        db_name = ''
        my_pg_project = "geometa"
        myschem = "prj_system"

        for i in range(len(current_connection_string)):
            tmp = current_connection_string[i]
            if "Host=" in current_connection_string[i]:
                localhost = tmp.replace("Host=", "")
            elif "Port=" in current_connection_string[i]:
                port = tmp.replace("Port=", "")
            elif "Database=" in current_connection_string[i]:
                db_name = tmp.replace("Database=", "")

        loginDlg = UserCredentialsDialog()
        loginDlg.exec()
        self.userCredentials = loginDlg.getUserCredentials()
        if self.userCredentials != None:
            uri_str = 'postgresql://' + urllib.parse.quote(self.userCredentials.user) + ":" + urllib.parse.quote(self.userCredentials.password) + "@" + localhost + ":" + port + "?sslmode=disable&dbname="+ db_name + "&schema="+ myschem +"&project=" + my_pg_project
            try:
                preId = QgsPathResolver.setPathPreprocessor(self.__pathPreprocessor)
                
                isOpened = QgsProject.instance().read(uri_str)
                
                QgsPathResolver.removePathPreprocessor(preId)

                if isOpened == False:
                    MessageBoxHelper.showProjectOpeningErrorMessageBox(self)    
                else:
                    self.__closeDlg()
            except IOError:
                MessageBoxHelper.showProjectOpeningErrorMessageBox(self)

    def __qlistwidgetClicked(self, item):
        self.button_open.setEnabled(True)

    """Модифицируем перед открытием каждого слоя путь к нему, добавляя пользовательские учетные данные"""
    def __pathPreprocessor(self, path):
        newPath = "{0} {1} {2}".format(path, "user='{0}'".format(self.userCredentials.user), "password='{0}'".format(self.userCredentials.password))
        return newPath

